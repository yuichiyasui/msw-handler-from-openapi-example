/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Swagger PetStore Clone
 * Reference [OpenAPI example](https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v3.0/petstore.yaml)
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Error,
  ListPetsQueryParams,
  Pet,
  Pets,
  RegisterPetRequest,
  ShowPetByIdQueryPathParameters,
} from ".././";
import { customInstance } from "../../custom-instance";
import type { ErrorType, BodyType } from "../../custom-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary List all pets
 */
export const listPetsQuery = (
  params?: ListPetsQueryParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Pets>(
    { url: `/pets`, method: "get", params, signal },
    options,
  );
};

export const getListPetsQueryQueryKey = (params?: ListPetsQueryParams) => {
  return [`/pets`, ...(params ? [params] : [])] as const;
};

export const getListPetsQueryQueryOptions = <
  TData = Awaited<ReturnType<typeof listPetsQuery>>,
  TError = ErrorType<Error>,
>(
  params?: ListPetsQueryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listPetsQuery>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListPetsQueryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPetsQuery>>> = ({
    signal,
  }) => listPetsQuery(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listPetsQuery>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListPetsQueryQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPetsQuery>>
>;
export type ListPetsQueryQueryError = ErrorType<Error>;

/**
 * @summary List all pets
 */
export const useListPetsQuery = <
  TData = Awaited<ReturnType<typeof listPetsQuery>>,
  TError = ErrorType<Error>,
>(
  params?: ListPetsQueryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listPetsQuery>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListPetsQueryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create a pet
 */
export const createPetsMutation = (
  registerPetRequest: BodyType<RegisterPetRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/pets`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: registerPetRequest,
    },
    options,
  );
};

export const getCreatePetsMutationMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPetsMutation>>,
    TError,
    { data: BodyType<RegisterPetRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPetsMutation>>,
  TError,
  { data: BodyType<RegisterPetRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPetsMutation>>,
    { data: BodyType<RegisterPetRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createPetsMutation(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreatePetsMutationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPetsMutation>>
>;
export type CreatePetsMutationMutationBody = BodyType<RegisterPetRequest>;
export type CreatePetsMutationMutationError = ErrorType<Error>;

/**
 * @summary Create a pet
 */
export const useCreatePetsMutation = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPetsMutation>>,
    TError,
    { data: BodyType<RegisterPetRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getCreatePetsMutationMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Info for a specific pet
 */
export const showPetByIdQuery = (
  { petId }: ShowPetByIdQueryPathParameters,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Pet>(
    { url: `/pets/${petId}`, method: "get", signal },
    options,
  );
};

export const getShowPetByIdQueryQueryKey = ({
  petId,
}: ShowPetByIdQueryPathParameters) => {
  return [`/pets/${petId}`] as const;
};

export const getShowPetByIdQueryQueryOptions = <
  TData = Awaited<ReturnType<typeof showPetByIdQuery>>,
  TError = ErrorType<Error>,
>(
  { petId }: ShowPetByIdQueryPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showPetByIdQuery>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getShowPetByIdQueryQueryKey({ petId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof showPetByIdQuery>>
  > = ({ signal }) => showPetByIdQuery({ petId }, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!petId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof showPetByIdQuery>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShowPetByIdQueryQueryResult = NonNullable<
  Awaited<ReturnType<typeof showPetByIdQuery>>
>;
export type ShowPetByIdQueryQueryError = ErrorType<Error>;

/**
 * @summary Info for a specific pet
 */
export const useShowPetByIdQuery = <
  TData = Awaited<ReturnType<typeof showPetByIdQuery>>,
  TError = ErrorType<Error>,
>(
  { petId }: ShowPetByIdQueryPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showPetByIdQuery>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShowPetByIdQueryQueryOptions({ petId }, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
